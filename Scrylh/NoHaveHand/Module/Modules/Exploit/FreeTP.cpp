#include "FreeTP.h"
#include "../Module.h"
#include "../../../../Utils/TimerUtil.h"


float glide = 1.001f;
float maxY = -1.f;
float glideModEffective = 100;
float glideMod = -0.02f;
bool superMan = false;
bool hasteleported = false;
bool border = false;
bool bypass = true;
int tmp = 1;
vec3_t newPos;
vec3_t moveVec;
int teleportID = 0;

FreeTP::FreeTP() : IModule(0, Category::MOVEMENT, "Packet-Fly") {
    registerFloatSetting("Speed", &speed, speed, 0.05f, 0.1f);
    registerFloatSetting("y-axis", &upanddown, upanddown, 0.1f, 0.2f);
    // Add other settings here
}

FreeTP::~FreeTP() {
}

const char* FreeTP::getModuleName() {
    return "Packet-Fly";
}

void FreeTP::onTick(C_GameMode* gm) {
    vec3_t* pos = g_Data.getLocalPlayer()->getPos();

    C_LocalPlayer* player = g_Data.getLocalPlayer();

    if (player->onGround) player->jumpFromGround();

    gm->player->velocity = vec3_t(0, 0, 0);
    glideModEffective = glideMod;
    C_GameSettingsInput* input = g_Data.getClientInstance()->getGameSettingsInput();

    if (!superMan) {
        // Implement non-superman behavior here
    }
    else {
        vec3_t pos = *g_Data.getLocalPlayer()->getPos();
        gm->player->velocity = vec3_t(0, 0, 0);
        if (input == nullptr) return;
        float x = 0.f;
        float z = 0.f;

        // Send a modify packet to the server to set the player's position
        C_MovePlayerPacket pModify(g_Data.getLocalPlayer(), gm->player->velocity);
        g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&pModify);
    }
}

void FreeTP::onMove(C_MoveInputHandler* input) {
    auto player = g_Data.getLocalPlayer();
    vec2_t movevec2_td = { input->forwardMovement, -input->sideMovement };
    vec3_t pos = *g_Data.getLocalPlayer()->getPos();

    float calcYaw = (player->yaw + 90) * (PI / 180);

    float c = cos(calcYaw);
    float s = sin(calcYaw);
    movevec2_td = { movevec2_td.x * c - movevec2_td.y * s, movevec2_td.x * s + movevec2_td.y * c };

    float yaw = player->yaw;

    bool pressed = movevec2_td.magnitude() > 0.01f;

    if (input->forward && input->backward)
        return;

    if (input->right) {
        yaw += 90.f;
        if (input->forward)
            yaw -= 45.f;
        else if (input->backward)
            yaw += 45.f;
    }
    if (input->left) {
        yaw -= 90.f;
        if (input->forward)
            yaw += 45.f;
        else if (input->backward)
            yaw -= 45.f;
    }

    if (input->backward && !input->left && !input->right)
        yaw += 180.f;

    if (!superMan) {
        float calcYaw = (yaw + 90) * (PI / 180);
        moveVec.x = movevec2_td.x * speed;
        moveVec.z = movevec2_td.y * speed;
        vec3_t targetPos = pos.add(vec3_t(moveVec.x / tmp, moveVec.y, moveVec.z / tmp));
        player->setPos(targetPos);
    }
    else {
        float calcYaw = (yaw + 90) * (PI / 180);
        moveVec.x = movevec2_td.x * speed;
        moveVec.z = movevec2_td.y * speed;
        vec3_t targetPos = vec3_t(moveVec.x, moveVec.y, moveVec.z);
        player->setPos(targetPos);

        if (pressed) {
            float lerpFactor = 0.1f; // Adjust this value as needed
            vec3_t currentPos = *g_Data.getLocalPlayer()->getPos();
            targetPos = currentPos.lerp(targetPos, lerpFactor);
            player->setPos(targetPos);
        }
    }
}

void FreeTP::onSendPacket(Packet* packet) {
    if (packet->isInstanceOf<C_MovePlayerPacket>()) {
        // Create a custom flying packet
        auto* movePacket = reinterpret_cast<C_MovePlayerPacket*>(packet);

        // Set the entityRuntimeID to your local player's ID
        movePacket->entityRuntimeID = g_Data.getLocalPlayer()->entityRuntimeId;

        // Set the position you want to fly to (adjust these values as needed)
        movePacket->Position = moveVec;

        // Set other necessary fields like pitch, yaw, and mode
        movePacket->pitch = g_Data.getLocalPlayer()->pitch;
        movePacket->yaw = g_Data.getLocalPlayer()->yaw;
        movePacket->headYaw = g_Data.getLocalPlayer()->yaw;
        movePacket->onGround = true;
        movePacket->mode = 0;

        // Send the custom flying packet
        g_Data.getClientInstance()->loopbackPacketSender->sendToServer(movePacket);
    }
}


void FreeTP::onDisable() {
    if (g_Data.getLocalPlayer() != nullptr)
        g_Data.getLocalPlayer()->aabb.upper.y = g_Data.getLocalPlayer()->aabb.lower.y + (float)1.8f;
}
